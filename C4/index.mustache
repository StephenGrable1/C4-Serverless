<!DOCTYPE HTML>

<html>
<head>
<script src="https://d3js.org/d3.v5.js"></script>
<link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">


<style>

body {
  font-family: 'Open Sans', sans-serif;
  min-height: 100%;
  margin: 0px;
  background-color: #2E323C;
  color:white;
}

.line {
  fill: none;
  stroke: orange;
  stroke-width: 2px;
}


.axisGray line{
  stroke: #A5AEC0;
}

.axisGray path{
  stroke: #A5AEC0;
}

.axisGray text{
  fill: #A5AEC0;
} 

.dashboard-nav-outer{
  width:950px;
  height:150px;
  margin:auto;
  margin-top:30px;
  padding-left:80px;
  
}

.dashboard-header{
  width:auto;
  height: 100px;
  background-color:blue;
  color:white;
  float:left;
  margin-right:30px;
  padding:8px;
  font-size:22px;
  font-weight:600px;
  text-align:center;
  border: 1px solid #ccc;
  border-radius:3px;
}

.header-one {
  background-color: #68B1CE;
}

.header-two {
  background-color: #57C9A1;
}

.header-three {
  background-color: #7D6FCA;
}

.header-four {
  background-color: #E4C074;
}

.most{
  width:auto;
}

.dashboard-header:hover {
  background-color: lightblue;
  cursor:pointer;
}

.most:hover{
  cursor:default;
}

.header-three:hover {
  background-color: #7D6FCA;
}

.header-four:hover {
  background-color: #E4C074;
}

.dash-box-number{
  font-size:28px;
  margin-top:18px;
}

.most-text{
  margin-top:8px;
  font-size:20px;
}

.hide {
   display:none;
}

#aggregate-graph-outer{
  width:900px;
  height:550px;
  background-color:#415175;
  margin:auto;
  padding-top:30px;
  padding-left:60px;
  border-radius:3px;
}

#aggregate-graph-title{
  text-align:center;
  margin-top:-10px;
  padding-right:60px;
}

.tooltip-agg {	
    position: absolute;			
    text-align: center;			
    width: 120px;					
    height: 28px;					
    padding: 2px;				
    font: 12px sans-serif;		
    background: lightsteelblue;	
    border: 0px;		
    border-radius: 8px;	
}		

.tooltip-func {	
    position: absolute;			
    text-align: center;			
    width: 150px;					
    height: 46px;					
    padding: 2px;				
    font: 12px sans-serif;		
    background: lightsteelblue;	
    border: 0px;		
    border-radius: 8px;	
}		
   

.dot {
  stroke: #000;
}

tr:nth-child(even) {
  background-color: lightgrey;
}

html {
  height: 100%;
}

.menu {
  position: fixed;
  background-color: #415175;
  float: left;
  width: 20%;
  height: 100%;
  border: 1px solid #ccc;
}

.menu button {
  text-align: left;
  cursor: pointer;
  transition: 0.3s;
  font-size: 20px;
  color: white;
  padding: 18px 12px;
  width: 100%;
  background-color: inherit;
  transition: 0.3s;
}

.menu-links {
  float: left;
  padding: 0px 12px;
  border: 1px solid #ccc;
  width: 70%;
  color:white;
}

.tags, .functions {
  width: 100%;
  font-size: 18px;
  padding: 1%;
  background-color:#405176;
  color:white;
}

.tags:hover{
  cursor:pointer;
} 

.functions:hover{
  cursor:pointer;
}

.menu button:hover {
    color: #fff;
    cursor:pointer;
}

.menu button:focus{
  background-color:#4BCCD1;
}

.p {
    float: right;
}

.content {
    float: right;
    padding: 0px 12px;
    width: 75%;
    height: 100%;
}

.function-data-outer{
  width:100%;
  height:600px;
  background-color:#415175;
  margin:auto;
  color:black;
  border:1px solid #ccc;
  border-radius:3px;
}

.function-info-box{
  width:350px;
  margin:auto;
  margin-top:70px;
  background-color:#efefef;
  float:right;
  margin-right:25px;
  border: 1px solid #ccc;
  border-radius:3px;
}

.function-info-box ul {
  list-style:none;
}

.function-info-box li {
  margin-bottom:10px;
}

.function-info-box p{
  text-align:center;
  font-size:23px;
  margin-top:10px;
}

.function-viz-outer{
  width:580px;
  height:auto;
  float:left;
  margin-left:30px;
  padding:8px;
}

#info-graph{
  width:90%;
  height: 1500px;
  margin:auto;
}

.tagFunction {
  background-color: #415175;
  width: 100%;
  font-size: 18px;
  text-align: left;
  padding: 1%;
  color:white;
}

.tagFunction:hover{
  cursor:pointer;
}

.graphButton {
  display: inline-block;
  margin: 30px auto 30px 400px;
}

.tableButton {
  display: inline-block;
  margin: 30px auto 30px 100px;
}

</style>
</head>
<body>

  <div class="menu"> 
    <button class="menu-links" onclick="opn(event, 'home'); topFunction();">Dashboard</button>
    <button class="menu-links" onclick="opn(event, 'tagsOnly'); topFunction();">Tags</button>
    <button class="menu-links" onclick="opn(event, 'div-func'); topFunction();">Functions</button>
  </div>


<div class="content" id="home">

  <div class="dashboard-nav-outer">
    <div class="dashboard-header header-one" onclick="opn(event, 'div-func'); topFunction();">
       <div class="dash-box-title" >
           Total Functions
       </div>
       <div class="dash-box-number">
           {{totalFunctionCount}}
       </div>
    </div>

    <div class="dashboard-header header-two" onclick="opn(event, 'tagsOnly'); topFunction();">
       <div class="dash-box-title">
           Total Tag Groups
       </div>
       <div class="dash-box-number">
           {{totalTagGroupCount}}
       </div>
    </div>

     <div class="dashboard-header most header-three">
       <div class="dash-box-title">
           Most Invoked
       </div>
       <div class="dash-box-number most-text">
            Name: {{mostUsedName}}
       </div>
       <div class="dash-box-number most-text">
           Count: {{mostUsedCount}} 
       </div>
    </div>

     <div class="dashboard-header most header-four">
       <div class="dash-box-title">
           Least Invoked
       </div>
       <div class="dash-box-number most-text">
            Name: {{leastUsedName}}
       </div>
       <div class="dash-box-number most-text">
           Count: {{leastUsedCount}}
       </div>
    </div>
   </div>

   <div id="aggregate-graph-outer">
      <h1 id="aggregate-graph-title">Aggregate Function Graph</h1>
   </div>
  </div>


  <div class="content hide" id="tagsOnly">
    <h3>
        {{#tagsArray}}
          {{{.}}}
        {{/tagsArray}}
    </h3>
  </div>

  <div class="content hide" id="div-func">
    <h3> 
        {{#function}}
          {{{.}}}
        {{/function}}
    </h3>
  </div> 
  

    <div id="rawTimeDurationData" style="display:none">{{rawTimeDurationData}}</div>
    <div id="info-graph" ></div>

<script id="template" type="x-tmpl-mustache">
</script>


<script>
//D3 data visualizations for main dashboard aggregate graph
var fullTestData = JSON.parse(document.getElementById('rawTimeDurationData').innerHTML);
var margin = {top:20, right: 10, bottom: 50, left: 80},
    width = 800 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scaleTime()
	.range([0, width]);

var y = d3.scaleLinear().range([height, 0]);

var valueLine = d3.line()
    .x(function(d) {return x(d.date) + 50})
    .y(function(d) {return y(d.duration)})

var leftCount = 0;
var rightCount = 0;
  console.log('this is duration series: ', fullTestData);

  var testData = [];
  var colorPick = 0;
  var colorArray = ['#57C9A1', '#68B1CE', '#7D6FCA', '#E4C074']
  Object.keys(fullTestData).forEach((funcName) => {
    fullTestData[funcName].durationSeries.map((dataPoint) => {
       var newDataPoint = {
          date: dataPoint.date,
          duration: dataPoint.duration,
          color: colorArray[colorPick],
          funcName: funcName,
        }
       testData.push(newDataPoint);
       return;
     });
     colorPick++;
  })

  console.log('Building aggregate test data: ', testData)
 

  drawSvg(testData);
  draw(testData);


function drawSvg(data) {
  leftCount = 0;
  rightCount = 0;
    d3.select('#aggregate-graph-outer')
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
};

function draw(testData, color){

  var data = testData;
  var colorFill = '';

  data.forEach((d) => {
    d.date = new Date(d.date);
    d.duration = +d.duration;
  })

   x.domain(d3.extent(data, function(d) {return d.date; }));
   y.domain([0, d3.max(data, function(d) {return d.duration +20; })]);
  
    var svg = d3.select(`#aggregate-graph-outer svg`);
    var div = d3.select("body").append("div")
    .attr("class", "tooltip-agg")
    .style("opacity", 0);

    svg.selectAll("dot")
      .data(data)
      .enter().append("circle")
      .attr("r", 5)
      .attr("cx", function(d) { return x(d.date) + 50; })
      .attr("cy", function(d) { return y(d.duration); })
      .attr("fill",function(d) { return (d.color); }) 
      .on("click", function(d) {		
            div.transition()		
                .duration(200)		
                .style("opacity", 1);		
            div	.html(d.funcName + "<br/>"  + "Duration: " + (d.duration).toFixed(2) + "ms")	
                .style("left", (d3.event.pageX) + "px")		
                .style("top", (d3.event.pageY - 28) + "px");	
            })					
        .on("mouseout", function(d) {		
            div.transition()		
                .duration(300)		
                .style("opacity", 0);	
        });
      

  // Add the X Axis
  var xChange = svg.append("g")
      .attr("transform", "translate(" + 50 +"," + height + ")")
      .attr("class", "axisGray")
      .call(d3.axisBottom(x));

  svg.append("text")             
      .attr("transform", "translate(" + (width/2) + " ," + (height + margin.top + 20) + ")")
      .attr("x", 20)
      .attr("fill", "#A5AEC0")
      .text("Date");    

  // Add the Y Axis
  var yChange = svg.append("g")
      .attr("transform", "translate(" + 50 + ", 0)")
      .attr("class", "axisGray")
      .call(d3.axisLeft(y));

  svg.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0)
      .attr("x", -200)
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .attr("fill", "#A5AEC0")
      .text("Duration (ms)");  
  }

</script>











<script>
//D3 data visualizations for individual functions and tagGroups
var fullTestData = JSON.parse(document.getElementById('rawTimeDurationData').innerHTML);
var margin = {top:20, right: 10, bottom: 50, left: 80},
    width = 600 - margin.left - margin.right,
    height = 450 - margin.top - margin.bottom;

var x = d3.scaleTime()
	.range([0, width]);

var y = d3.scaleLinear().range([height, 0]);

var valueLine = d3.line()
    .x(function(d) {return x(d.date) + 50})
    .y(function(d) {return y(d.duration)})

var leftCount = 0;
var rightCount = 0;

for(var func in fullTestData) {
  var testData = fullTestData[func].durationSeries;
  
  drawSvg(testData, func + 'graph1');
  draw(testData, func + 'graph1');
  drawSvg(testData, func + 'graph2');
  draw(testData, func + 'graph2');
}

function drawSvg(data, func) {
  leftCount = 0;
  rightCount = 0;
    d3.select(`.${func}`)
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .call(d3.zoom()
    .wheelDelta(function () {
      var myMouse = d3.mouse(this);
      var direction = d3.event.wheelDelta < 0 ? 'down' : 'up';
      
      if(myMouse[0] > 300) {
        if (direction === "up") {
          if(leftCount + 1 < data.length - rightCount - 1) {
            leftCount = leftCount + 1;
          } else {
            console.log("HERE down", leftCount, rightCount, d3.event.wheelDelta);
            //leftCount = leftCount + 1;
          }
        } else {
           console.log("HERE up", leftCount, rightCount, d3.event.wheelDelta);
          if(leftCount - 1 > 0) {
            leftCount = leftCount - 1;
          } else if(leftCount === 1) {
            rightCount = rightCount - 1;
          }
        }
      } else {
        if (direction === "up") {
          if(data.length - rightCount + 1 > leftCount + 2) {
            rightCount = rightCount + 1
          }
        } else {
           if(data.length - 1 > data.length - rightCount - 1) {
             rightCount = rightCount - 1;
           }
        }

      }
      var newData = data.slice(leftCount , data.length - rightCount);
      d3.select(`.${func} svg`).selectAll("*").remove();
      draw(newData, func);
    }))
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
};

function draw(testData, func){

  var data = testData;

  data.forEach((d) => {
    d.date = new Date(d.date);
    d.duration = +d.duration;
  })

   x.domain(d3.extent(data, function(d) {return d.date; }));
   y.domain([0, d3.max(data, function(d) {return d.duration + 20; })]);
  
    var svg = d3.select(`.${func} svg`);
    var div = d3.select("body").append("div")
    .attr("class", "tooltip-func")
    .style("opacity", 0);

  //  svg.append("rect")
  //    .attr("width", "100%")
  //    .attr("height", "100%")
  //    .attr("fill", "white");
      
  // Add the valueline path.
  //svg.append("path")
    //.data([data])
    //.attr("class", "line")
    //.attr("d", valueLine)
    //.enter();

    svg.selectAll("dot")
      .data(data)
      .enter().append("circle")
      .attr("r", 5)
      .attr("cx", function(d) { return x(d.date) + 50; })
      .attr("cy", function(d) { return y(d.duration); })
      .attr("fill","#57C9A1") 

  // Add the X Axis
  var xChange = svg.append("g")
      .attr("transform", "translate(" + 50 +"," + height + ")")
      .attr("class", "axisGray")
      .call(d3.axisBottom(x));

  svg.append("text")             
      .attr("transform", "translate(" + (width/2) + " ," + (height + margin.top + 20) + ")")
      .attr("x", 20)
      .attr("fill", "#ecedf1")
      .text("Date");    

  // Add the Y Axis
  var yChange = svg.append("g")
      .attr("transform", "translate(" + 50 + ", 0)")
      .attr("class", "axisGray")
      .call(d3.axisLeft(y));

  svg.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0)
      .attr("x", -170)
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .attr("fill", "#ecedf1")
      .text("Duration (ms)");  
  }

</script>


<script>


function topFunction() {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
}

function opn(evt, menuItem) {
  var tabcontent = document.getElementsByClassName("content");
  for (var i = 0; i < tabcontent.length; i ++) {
    if (tabcontent[i].className === "content") {
      tabcontent[i].className += " hide"
    }
    if (tabcontent[i].id === menuItem) {
      tabcontent[i].className = "content"
    }
  }

  evt.currentTarget.className += " active";
}

  var acc = document.getElementsByClassName("tags");
  for (i = 0; i < acc.length; i++) {
    acc[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  var durationAndStats = document.getElementsByClassName("tagFunction");
  for (i = 0; i < durationAndStats.length; i++) {
    durationAndStats[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  var durationAndStats = document.getElementsByClassName("functions");
  for (i = 0; i < durationAndStats.length; i++) {
    durationAndStats[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.display === "block") {
            panel.style.display = "none";
        } else {
            panel.style.display = "block";
        }
    });
  }

  function showGraph(evt, menuItem) {
    var graphs = document.getElementsByClassName(menuItem);
    if (graphs[0].className !== menuItem) {
      var newMenuItem = menuItem.split('graph1')[0] + 'table';
      var table = document.getElementsByClassName(newMenuItem);
      table[0].className += " hide"
      graphs[0].className = menuItem;
    }
  }

  function showTable(evt, menuItem) {
    var tables = document.getElementsByClassName(menuItem);
    if (tables[0].className !== menuItem) {
      var newMenuItem = menuItem.split('table')[0] + 'graph';
      var graph = document.getElementsByClassName(newMenuItem + 1);
      graph[0].className += " hide";
      tables[0].className = menuItem;
    }
  }

  function showGraph2(evt, menuItem) {
    var graphs = document.getElementsByClassName(menuItem);
    if (graphs[0].className !== menuItem) {
      var newMenuItem = menuItem.split('graph2')[0] + 'table2';
      var table = document.getElementsByClassName(newMenuItem);
      table[0].className += " hide"
      graphs[0].className = menuItem;
    }
  }

  function showTable2(evt, menuItem) {
    var tables = document.getElementsByClassName(menuItem);
    if (tables[0].className !== menuItem) {
      var newMenuItem = menuItem.split('table2')[0] + 'graph';
      var graph = document.getElementsByClassName(newMenuItem + 2);
      graph[0].className += " hide";
      tables[0].className = menuItem;
    }
  }


</script>
</body>
</html>

